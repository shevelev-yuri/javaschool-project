package com.tsystems.ecm.service;

import com.tsystems.ecm.dto.EventDto;
import com.tsystems.ecm.dto.EventDtoRest;

import java.util.List;

/**
 * This service provides logic for manipulations with events.
 *
 * @author Yurii Shevelev
 * @version 1.0.0
 */
public interface EventService {

    /**
     * Gets the {@code List} containing all events DTOs.
     *
     * @return the {@code List} that contains all events
     */
    List<EventDto> getAll();

    /**
     * Gets the {@code List} containing all the events DTOs for the patient with {@code id}.
     *
     * @param id         the patient id
     * @param pageNumber the page currently selected
     * @param pageSize   the records quantity to be shown on the page
     * @return the {@code List} containing all the events DTOs for the patient or empty {@code List}
     */
    List<EventDto> getAllByPatientId(long id, int pageNumber, int pageSize);

    /**
     * Gets the {@code List} containing all events DTOs scheduled for today.
     *
     * @param pageSize   the records quantity to be shown on the page
     * @param pageNumber the page currently selected
     * @return the {@code List} containing all events DTOs scheduled for today or empty {@code List}
     */
    List<EventDto> getAllToday(int pageSize, int pageNumber);

    /**
     * <i>Overloaded method for REST requests.</i>
     * <p></p>
     * Gets the {@code List} containing all events DTOs scheduled for today.
     *
     * @return the {@code List} that contains all events DTOs scheduled for today or empty {@code List}
     */
    List<EventDtoRest> getAllToday();

    /**
     * Gets the {@code List} containing all events DTOs for current page.
     *
     * @param pageNumber the page currently selected
     * @param pageSize   the records quantity to be shown on the page
     * @return the {@code List} containing all events DTOs scheduled for today or empty {@code List}
     */
    List<EventDto> getAllByPage(int pageNumber, int pageSize);

    /**
     * Saves events that were generated by appointment creation.
     *
     * @param events the {@code List} to be saved, containing generated events
     * @return the number of events saved
     */
    int addEvents(List<EventDto> events);

    /**
     * Sets status of the event with specified id to 'Cancelled'.
     *
     * @param id     the event's id
     * @param reason the cancellation reason
     */
    void setCancelledById(long id, String reason);

    /**
     * Sets status of all events, generated by specific appointment, to 'Cancelled'.
     * <p></p>
     * Sets cancellation reason of the events to {@link com.tsystems.ecm.utils.StringConstants#APPOINTMENT_CANCELLATION_EVENTS_CANCEL_REASON
     * StringConstants#appointment cancellation events cancel reason}
     *
     * @param appointmentId the appointment id
     */
    void setCancelledByAppointmentId(long appointmentId);

    /**
     * Gets the {@code List} containing all events DTOs scheduled for next hour.
     *
     * @param pageSize   the records quantity to be shown on the page
     * @param pageNumber the page currently selected
     * @return the {@code List} containing all events DTOs scheduled for next hour or empty {@code List}
     */
    List<EventDto> getClosest(int pageSize, int pageNumber);

    /**
     * Gets number of total pages of records found by specific query.
     *
     * @param pageSize    the records quantity to be shown on the page
     * @param queryString the query type, can be 'patientId_<i>id</i>', 'today' or 'closest'
     * @return the total pages number
     */
    int getTotalPages(int pageSize, String queryString);

    /**
     * Sets status of the event with specified id to 'Accomplished'.
     *
     * @param id the event's id
     */
    void setAccomplishedById(long id);
}
